//print "boot start";
breakpoint;

//initialize state field of all process table entries other than idle process to be terminated. 
alias counter R0; 
counter = 1;
while(counter < 16) do
  [PROCESS_TABLE + 16*counter + 4] = TERMINATED;
  counter = counter + 1;
endwhile; 

//Required interrupt routines, library, exeption handler, init

//timer interrupt routine
loadi(4,17);
loadi(5,18);

//write : int 7
loadi(16,29);
loadi(17,30);

//exit : int 10
loadi(22,35);
loadi(23,36);
//library code

//scheduler
loadi(50,63);
loadi(51,64);

loadi(63,13);
loadi(64,14);

//exeption handler
loadi(2, 15);
loadi(3, 16);

//init code
loadi(65,7);
loadi(66,8);

//even program
loadi(86,69);

//-------------------------------------------------------------------------------------

//set page table entries for INIT process
PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//initialise process table entry for init process
[PROCESS_TABLE + 16 + 1] = 1; //PID
[PROCESS_TABLE + 16 + 11] = 80;//user area page number
[PROCESS_TABLE + 16 + 13] = 8*512;//UPTR
[PROCESS_TABLE + 16 + 12] = 0;//KPTR
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE+20;//PTBR
[PROCESS_TABLE + 16 + 15] = 10;//PTLR

//set process state to be created.
[PROCESS_TABLE + 16 + 4] = CREATED;

//transfer entry point value from header to top of the user stack of the init process
[76*512] = [65*512+1];

//-------------------------------------------------------------------------------------

//set page table entries for even process
PTBR = PAGE_TABLE_BASE+40;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 83;
[PTBR+5] = "0110";
[PTBR+6] = 84;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 86;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 87;
[PTBR+17] = "0110";
[PTBR+18] = 88;
[PTBR+19] = "0110";

//initialise process table entry for second process
[PROCESS_TABLE + 32 + 1] = 2; //PID
[PROCESS_TABLE + 32 + 11] = 89;//user area page number
[PROCESS_TABLE + 32 + 13] = 8*512;//UPTR
[PROCESS_TABLE + 32 + 12] = 0;//KPTR
[PROCESS_TABLE + 32 + 14] = PAGE_TABLE_BASE+40;//PTBR
[PROCESS_TABLE + 32 + 15] = 10;//PTLR

//set process state to be created.
[PROCESS_TABLE + 32 + 4] = CREATED;

//transfer entry point value from header to top of the user stack of the init process
[87*512] = [86*512+1];


//-------------------------------------------------------------------------------------

//return from module to os_startup code.
//print "ret boot";
breakpoint;
return;
